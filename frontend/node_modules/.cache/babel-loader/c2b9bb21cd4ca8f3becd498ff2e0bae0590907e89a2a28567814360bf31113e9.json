{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\cyberhack-game\\\\cyberhack-game\\\\frontend\\\\src\\\\components\\\\SectorDeck.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SectorDeck.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SectorDeck = ({\n  onSelectSectors\n}) => {\n  _s();\n  const [showDeck, setShowDeck] = useState(false);\n  const [selectedSectors, setSelectedSectors] = useState([]);\n\n  // Importer dynamiquement toutes les images de secteurs\n  const importAll = r => r.keys().map(r);\n  const sectorCards = importAll(require.context('../../assets/secteurs', false, /\\.(png|jpe?g|svg)$/));\n  const handleDeckClick = () => {\n    setShowDeck(!showDeck);\n  };\n  const handleCardClick = card => {\n    if (selectedSectors.includes(card)) {\n      setSelectedSectors(selectedSectors.filter(c => c !== card));\n    } else if (selectedSectors.length < 5) {\n      setSelectedSectors([...selectedSectors, card]);\n    }\n  };\n  const confirmSelection = () => {\n    onSelectSectors(selectedSectors);\n    setShowDeck(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sector-deck-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sector-deck ${showDeck ? 'expanded' : ''}`,\n      onClick: !showDeck ? handleDeckClick : undefined,\n      children: showDeck ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sector-card-grid\",\n        children: [sectorCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `sector-card ${selectedSectors.includes(card) ? 'selected' : ''}`,\n          onClick: () => handleCardClick(card),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: card,\n            alt: `Secteur ${index + 1}`,\n            className: \"sector-card-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-button\",\n          onClick: confirmSelection,\n          children: \"Valider (5 cartes)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deck-placeholder\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Cartes Secteurs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(SectorDeck, \"CrzO4NwmR4d0JHOsGz/QarqZnJQ=\");\n_c = SectorDeck;\nexport default SectorDeck;\nvar _c;\n$RefreshReg$(_c, \"SectorDeck\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SectorDeck","onSelectSectors","_s","showDeck","setShowDeck","selectedSectors","setSelectedSectors","importAll","r","keys","map","sectorCards","require","context","handleDeckClick","handleCardClick","card","includes","filter","c","length","confirmSelection","className","children","onClick","undefined","index","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/cyberhack-game/cyberhack-game/frontend/src/components/SectorDeck.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './SectorDeck.css';\r\n\r\nconst SectorDeck = ({ onSelectSectors }) => {\r\n  const [showDeck, setShowDeck] = useState(false);\r\n  const [selectedSectors, setSelectedSectors] = useState([]);\r\n  \r\n  // Importer dynamiquement toutes les images de secteurs\r\n  const importAll = (r) => r.keys().map(r);\r\n  const sectorCards = importAll(require.context('../../assets/secteurs', false, /\\.(png|jpe?g|svg)$/));\r\n\r\n  const handleDeckClick = () => {\r\n    setShowDeck(!showDeck);\r\n  };\r\n\r\n  const handleCardClick = (card) => {\r\n    if (selectedSectors.includes(card)) {\r\n      setSelectedSectors(selectedSectors.filter(c => c !== card));\r\n    } else if (selectedSectors.length < 5) {\r\n      setSelectedSectors([...selectedSectors, card]);\r\n    }\r\n  };\r\n\r\n  const confirmSelection = () => {\r\n    onSelectSectors(selectedSectors);\r\n    setShowDeck(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"sector-deck-container\">\r\n      <div \r\n        className={`sector-deck ${showDeck ? 'expanded' : ''}`}\r\n        onClick={!showDeck ? handleDeckClick : undefined}\r\n      >\r\n        {showDeck ? (\r\n          <div className=\"sector-card-grid\">\r\n            {sectorCards.map((card, index) => (\r\n              <div \r\n                key={index}\r\n                className={`sector-card ${selectedSectors.includes(card) ? 'selected' : ''}`}\r\n                onClick={() => handleCardClick(card)}\r\n              >\r\n                <img \r\n                  src={card} \r\n                  alt={`Secteur ${index + 1}`}\r\n                  className=\"sector-card-image\"\r\n                />\r\n              </div>\r\n            ))}\r\n            <button className=\"confirm-button\" onClick={confirmSelection}>\r\n              Valider (5 cartes)\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"deck-placeholder\">\r\n            <span>Cartes Secteurs</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectorDeck;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAMU,SAAS,GAAIC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAACF,CAAC,CAAC;EACxC,MAAMG,WAAW,GAAGJ,SAAS,CAACK,OAAO,CAACC,OAAO,CAAC,uBAAuB,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;EAEpG,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5BV,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMY,eAAe,GAAIC,IAAI,IAAK;IAChC,IAAIX,eAAe,CAACY,QAAQ,CAACD,IAAI,CAAC,EAAE;MAClCV,kBAAkB,CAACD,eAAe,CAACa,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKH,IAAI,CAAC,CAAC;IAC7D,CAAC,MAAM,IAAIX,eAAe,CAACe,MAAM,GAAG,CAAC,EAAE;MACrCd,kBAAkB,CAAC,CAAC,GAAGD,eAAe,EAAEW,IAAI,CAAC,CAAC;IAChD;EACF,CAAC;EAED,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;IAC7BpB,eAAe,CAACI,eAAe,CAAC;IAChCD,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACEL,OAAA;IAAKuB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,eACpCxB,OAAA;MACEuB,SAAS,EAAE,eAAenB,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAG;MACvDqB,OAAO,EAAE,CAACrB,QAAQ,GAAGW,eAAe,GAAGW,SAAU;MAAAF,QAAA,EAEhDpB,QAAQ,gBACPJ,OAAA;QAAKuB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,GAC9BZ,WAAW,CAACD,GAAG,CAAC,CAACM,IAAI,EAAEU,KAAK,kBAC3B3B,OAAA;UAEEuB,SAAS,EAAE,eAAejB,eAAe,CAACY,QAAQ,CAACD,IAAI,CAAC,GAAG,UAAU,GAAG,EAAE,EAAG;UAC7EQ,OAAO,EAAEA,CAAA,KAAMT,eAAe,CAACC,IAAI,CAAE;UAAAO,QAAA,eAErCxB,OAAA;YACE4B,GAAG,EAAEX,IAAK;YACVY,GAAG,EAAE,WAAWF,KAAK,GAAG,CAAC,EAAG;YAC5BJ,SAAS,EAAC;UAAmB;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B;QAAC,GARGN,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASP,CACN,CAAC,eACFjC,OAAA;UAAQuB,SAAS,EAAC,gBAAgB;UAACE,OAAO,EAAEH,gBAAiB;UAAAE,QAAA,EAAC;QAE9D;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,gBAENjC,OAAA;QAAKuB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,eAC/BxB,OAAA;UAAAwB,QAAA,EAAM;QAAe;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA1DIF,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AA4DhB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}