{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\cyberhack-game\\\\cyberhack-game\\\\frontend\\\\src\\\\components\\\\SectorDeck.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './SectorDeck.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SectorDeck = ({\n  onSelectSectors\n}) => {\n  _s();\n  const [showDeck, setShowDeck] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [hoveredTableCard, setHoveredTableCard] = useState(null);\n  const deckRef = useRef(null);\n\n  // Importer les 10 cartes secteur (recto/verso)\n  const sectorCards = Array.from({\n    length: 10\n  }, (_, i) => ({\n    recto: require(`../../assets/secteurs/secteur_${i + 1}_recto.png`),\n    verso: require(`../../assets/secteurs/secteur_${i + 1}_verso.png`)\n  }));\n\n  // Fermer le deck quand on clique ailleurs\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (deckRef.current && !deckRef.current.contains(event.target)) {\n        setShowDeck(false);\n        setIsExpanded(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  const toggleDeckView = () => {\n    if (showDeck) {\n      setIsExpanded(!isExpanded);\n    } else {\n      setShowDeck(true);\n      setIsExpanded(false);\n    }\n    setSelectedCards([]);\n  };\n  const handleCardClick = index => {\n    const newSelection = [...selectedCards];\n    const cardIndex = newSelection.findIndex(card => card.index === index);\n    if (cardIndex >= 0) {\n      newSelection.splice(cardIndex, 1);\n    } else if (newSelection.length < 5) {\n      newSelection.push({\n        index,\n        side: newSelection.length % 2 === 0 ? 'recto' : 'verso'\n      });\n    }\n    setSelectedCards(newSelection);\n  };\n  const confirmSelection = () => {\n    const selectedSectors = selectedCards.map(card => ({\n      recto: sectorCards[card.index].recto,\n      verso: sectorCards[card.index].verso\n    }));\n    onSelectSectors(selectedSectors);\n    setShowDeck(false);\n    setIsExpanded(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sector-deck-container\",\n      ref: deckRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deck-pile\",\n        onClick: toggleDeckView,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), showDeck && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card-selection-modal ${isExpanded ? 'expanded' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grid\",\n          children: sectorCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card-item ${selectedCards.some(c => c.index === index) ? 'selected' : ''}`,\n            onClick: () => handleCardClick(index),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: selectedCards.some(c => c.index === index) ? card[selectedCards.find(c => c.index === index).side] : card.recto,\n              alt: `Secteur ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"resize-btn\",\n            onClick: () => setIsExpanded(!isExpanded),\n            children: isExpanded ? 'Réduire' : 'Agrandir'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"confirm-btn\",\n            onClick: confirmSelection,\n            disabled: selectedCards.length !== 5,\n            children: \"Valider 5 cartes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(SectorDeck, \"dDdOAYpf42O8OGICYkrcHE2OzUU=\");\n_c = SectorDeck;\nexport default SectorDeck;\nvar _c;\n$RefreshReg$(_c, \"SectorDeck\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","SectorDeck","onSelectSectors","_s","showDeck","setShowDeck","isExpanded","setIsExpanded","selectedCards","setSelectedCards","hoveredTableCard","setHoveredTableCard","deckRef","sectorCards","Array","from","length","_","i","recto","require","verso","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","toggleDeckView","handleCardClick","index","newSelection","cardIndex","findIndex","card","splice","push","side","confirmSelection","selectedSectors","map","children","className","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","some","c","src","find","alt","disabled","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/cyberhack-game/cyberhack-game/frontend/src/components/SectorDeck.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './SectorDeck.css';\r\n\r\nconst SectorDeck = ({ onSelectSectors }) => {\r\n  const [showDeck, setShowDeck] = useState(false);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const [hoveredTableCard, setHoveredTableCard] = useState(null);\r\n  const deckRef = useRef(null);\r\n\r\n  // Importer les 10 cartes secteur (recto/verso)\r\n  const sectorCards = Array.from({ length: 10 }, (_, i) => ({\r\n    recto: require(`../../assets/secteurs/secteur_${i+1}_recto.png`),\r\n    verso: require(`../../assets/secteurs/secteur_${i+1}_verso.png`)\r\n  }));\r\n\r\n  // Fermer le deck quand on clique ailleurs\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (deckRef.current && !deckRef.current.contains(event.target)) {\r\n        setShowDeck(false);\r\n        setIsExpanded(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const toggleDeckView = () => {\r\n    if (showDeck) {\r\n      setIsExpanded(!isExpanded);\r\n    } else {\r\n      setShowDeck(true);\r\n      setIsExpanded(false);\r\n    }\r\n    setSelectedCards([]);\r\n  };\r\n\r\n  const handleCardClick = (index) => {\r\n    const newSelection = [...selectedCards];\r\n    const cardIndex = newSelection.findIndex(card => card.index === index);\r\n\r\n    if (cardIndex >= 0) {\r\n      newSelection.splice(cardIndex, 1);\r\n    } else if (newSelection.length < 5) {\r\n      newSelection.push({\r\n        index,\r\n        side: newSelection.length % 2 === 0 ? 'recto' : 'verso'\r\n      });\r\n    }\r\n\r\n    setSelectedCards(newSelection);\r\n  };\r\n\r\n  const confirmSelection = () => {\r\n    const selectedSectors = selectedCards.map(card => ({\r\n      recto: sectorCards[card.index].recto,\r\n      verso: sectorCards[card.index].verso\r\n    }));\r\n    onSelectSectors(selectedSectors);\r\n    setShowDeck(false);\r\n    setIsExpanded(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"sector-deck-container\" ref={deckRef}>\r\n        <div className=\"deck-pile\" onClick={toggleDeckView}>\r\n          <div className=\"card-back\"></div>\r\n        </div>\r\n\r\n        {showDeck && (\r\n          <div className={`card-selection-modal ${isExpanded ? 'expanded' : ''}`}>\r\n            <div className=\"card-grid\">\r\n              {sectorCards.map((card, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`card-item ${\r\n                    selectedCards.some(c => c.index === index) ? 'selected' : ''\r\n                  }`}\r\n                  onClick={() => handleCardClick(index)}\r\n                >\r\n                  <img\r\n                    src={selectedCards.some(c => c.index === index) \r\n                      ? card[selectedCards.find(c => c.index === index).side]\r\n                      : card.recto}\r\n                    alt={`Secteur ${index + 1}`}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"modal-controls\">\r\n              <button \r\n                className=\"resize-btn\"\r\n                onClick={() => setIsExpanded(!isExpanded)}\r\n              >\r\n                {isExpanded ? 'Réduire' : 'Agrandir'}\r\n              </button>\r\n              <button \r\n                className=\"confirm-btn\"\r\n                onClick={confirmSelection}\r\n                disabled={selectedCards.length !== 5}\r\n              >\r\n                Valider 5 cartes\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SectorDeck;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}